{"version":3,"sources":["components/ProjCard.js","views/IndexView.js","views/CreateView.js","views/DetailView.js","views/EditView.js","App.js","serviceWorker.js","index.js"],"names":["props","project","today","useState","Date","toISOString","toggleStatus","newStatus","console","log","dueDate","axios","put","_id","then","res","catch","err","className","name","status","onClick","e","delete","projects","setProjects","useEffect","get","response","data","sort","a","b","style","height","filter","map","idx","ProjCard","navigate","setName","setDueDate","errors","setErrors","to","error","key","htmlFor","type","value","onChange","target","post","errRes","errArr","Object","keys","push","message","App","IndexView","path","CreateView","DetailView","EditView","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94093c2d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport axios from 'axios';\n\nexport default props => {\n    const {project} = props;\n    const today = useState(new Date().toISOString());\n    \n    const toggleStatus = newStatus => {\n        console.log(Date(today) );\n        console.log(Date(project.dueDate));\n        axios.put(`http://localhost:8000/api/project/${project._id}`, {\"status\": newStatus})\n            .then(res => { console.log(res); })\n            .catch(err => { console.log(err); })\n    }\n\n    const deleteProject = e => {\n        axios.delete(`http://localhost:8000/api/project/${project._id}`)\n            .then( res => {console.log(res)});\n    }\n\n    return (\n        <div className=\"row m-2 p-3 border\">\n            <div className=\"row-col\">\n                <h5>\n                    {project.name}\n                    {today > project.dueDate? <span className=\"text-danger\">&nbsp;(Past Due)</span>:\"\"}\n                </h5>\n            </div>\n            <div className=\"row-col\">\n            <p>Due date: {project.dueDate}</p>\n            </div>\n            <div className=\"row-col\">\n                {project.status === \"backlog\" ?\n                    <button onClick={(e)=> toggleStatus(\"in_progress\")}>Start Project</button>\n                    :\n                    project.status === \"in_progress\" ?\n                        <button onClick={(e)=> toggleStatus(\"completed\")}>Move to Completed</button>\n                        :\n                        <button onClick={deleteProject}>Delete</button>\n                }\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport {navigate} from '@reach/router';\nimport axios from 'axios';\nimport ProjCard from '../components/ProjCard';\n\nexport default props => {\n    const [projects, setProjects] = useState([]);\n\n    useEffect(()=> {\n        axios.get('http://localhost:8000/api/projects')\n            .then(response => { \n                setProjects (\n                    response.data.projects.sort((a,b) =>\n                    (a.dueDate > b.dueDate )? 1: -1)\n                ); \n            })\n            .catch(err => console.log(err))\n    },[projects]);\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col border\">\n                    <h3>Backlog</h3>\n                </div>\n                <div className=\"col border\">\n                    <h3>In Progress</h3>\n                </div>\n                <div className=\"col border\">\n                    <h3>Completed</h3>\n                </div>\n            </div>\n            <div className=\"row overflow-auto\" style={{height: '500px'}}>\n                <div className=\"col border\">\n                    {projects.filter((project => project.status === \"backlog\")).map((project, idx) => \n                        <ProjCard idx={idx} project={project}/>\n                    )}\n                </div>\n                <div className=\"col border\">\n                    {projects.filter((project => project.status === \"in_progress\")).map((project, idx) => \n                        <ProjCard idx={idx} project={project}/>\n                    )}\n                </div>\n                <div className=\"col border\">\n                    {projects.filter((project => project.status === \"completed\")).map((project, idx) => \n                        <ProjCard idx={idx} project={project}/>\n                    )}\n                </div>\n            </div>\n            <div className=\"row border\" style={{height: '50px'}}>\n                <div className=\"col pt-2\">\n                    <button onClick={(e)=>navigate(\"/new\")}>Add New Project</button>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport {Link, navigate} from '@reach/router';\nimport axios from 'axios';\n\nexport default props => {\n    const [name, setName] = useState(\"\");\n    const [dueDate, setDueDate] = useState();\n    const status = \"backlog\";\n    const [errors, setErrors] = useState([]);\n\n    const createProject = e => {\n        axios.post('http://localhost:8000/api/project/new', {name, dueDate, status})\n            .then(response => { \n                console.log(response);\n                navigate(\"/\");\n            })\n            .catch(err => {\n                const errRes = err.response.data.errors;\n                const errArr = [];\n                for (const key of Object.keys(errRes)){\n                    errArr.push(errRes[key].message)\n                }\n                setErrors(errArr);\n            });\n        \n    }\n\n    return (\n        <div className=\"container p-3\">\n            <div className=\"row justify-content-center\">\n                <Link to=\"/\">Back to Dashboard</Link>\n            </div>\n            {errors.map((error, idx) => <div key={idx} className=\"text-danger\">{error}</div>)}\n            {/* New Project Form */}\n            <div className=\"row justify-content-center p-3\">\n                <div className=\"col-9 border\">\n                    <div className=\"row p-3\">\n                        <h4>Plan a new project</h4>\n                    </div>\n                    {/* Project Name */}\n                    <div className=\"row justify-content-center pt-2\">\n                        <div className=\"col-2 text-left py-1\">\n                            <label htmlFor=\"name\">Project Name:</label>\n                        </div>\n                        <div className=\"col-9 text-left py-1\">\n                            <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} className=\"form-control\"/>\n                        </div>\n                    </div>\n                    {/* Project Due Date */}\n                    <div className=\"row justify-content-center pt-2\">\n                        <div className=\"col-2 text-left py-1\">\n                            <label htmlFor=\"dueDate\">Due Date:</label>\n                        </div>\n                        <div className=\"col-9 text-left py-1\">\n                            <input type=\"date\" value={dueDate} onChange={(e) => setDueDate(e.target.value)} className=\"form-control\"/>\n                        </div>\n                    </div>\n                    {/* Button */}\n                    <div className=\"row justify-content-center py-4\">\n                        <button onClick={ createProject }>Plan Project</button>\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n    )\n}","import React from 'react';\n\nexport default props => {\n    return (\n        <div>\n            View One here\n        </div>\n    )\n}","import React from 'react';\n\nexport default props => {\n    return (\n        <div>\n            Edit here\n        </div>\n    )\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Router } from '@reach/router';\nimport IndexView from './views/IndexView';\nimport CreateView from './views/CreateView';\nimport DetailView from './views/DetailView';\nimport EditView from './views/EditView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Project Manager</h1>\n      <Router>\n        <IndexView path=\"/\"/>\n        <CreateView path=\"new/\" />\n        <DetailView path=\":id/\" />\n        <EditView path=\":id/edit\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}